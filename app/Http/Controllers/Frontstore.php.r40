<?php

namespace App\Http\Controllers;

use App\Http\Requests;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\URL;
use DB;
use App\Model\contactus;
use App\Model\users;
use App\Model\settings;
use App\Model\emailsettings;
use App\Model\cms;
use Session;
use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Lang;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Contracts\Auth\Registrar;
use MetaTag;
use Mail;
use SEO;
use SEOMeta;
use OpenGraph;
use Twitter;
use App;
use Illuminate\Support\Facades\Input;
use JWTAuth;
use Tymon\JWTAuth\Exceptions\JWTException;
use GuzzleHttp\Client;
use Guzzle\Http\Exception\ServerErrorResponseException;
use App\Model\api;
use App\Model\Api_model;
use Socialite;
use App\Model\cart_info;
use App\Model\vendors;
use App\Model\vendors_infos;
use App\Model\outlets;
use App\Model\outlet_infos;
DB::enableQueryLog();

class Frontstore extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
		//$client = new GuzzleHttp\Client();
		$this->client = new Client([
			// Base URI is used with relative requests
			'base_uri' => url('/'),
			// You can set any number of default request options.
			'timeout'  => 3000.0,
		]);
		//print_r($this->client);exit;
		$this->theme = Session::get("general")->theme;
    }
	public function store_list($city="",$location="",$category="",$current_long = '')//If curent long not empty means category act on latitue.
	{ 
		$api = New Api;
		$categories = "";
		if($location == "" && $category == "")
		{
			$categories_det = head_categories_list_by_url($city);
			if(!isset($categories_det->id))
			{
				return Redirect::to('/');
			}
			else {
				$categories = $categories_det->id;
			}
			$city = '';
		}
		$city         = $city;
		$location     = $location;
		//~ $current_lat  = 29.776255;
		//~ $current_long = 48.002007100000014;
		$user_id      = Session::get('user_id');
		Session::put('location', $location);
		Session::put('city', $city);
		$current_lat = '';
		if( !empty($current_long) )
		{
			$current_lat  = decrypt($category);
			$current_long = decrypt($current_long);
			$category = '';
		}
		$user_id      = Session::get('user_id');
		$category_url = $category;
		$store_array  = array("city" => $city, "location" => $location,"language" => getCurrentLang(),"category_ids" =>$categories,"type" =>"web","category_url" =>$category_url,"user_id" =>$user_id,"current_lat" =>$current_lat,"current_long" => $current_long);
		//~ print_r($store_array);die;
		$method       = "POST";
		$data         = array('form_params' => $store_array);
		//print_r($store_array);exit;
		$response     = $api->call_api($data,'api/store_list_ajax',$method);
		//~ echo '<pre>';print_r($response);exit;
		$store        = isset($response->response)?$response->response:'';
		//~ echo '<pre>';print_r($store);exit;
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		Twitter::setSite(Session::get("general_site")->site_name.' - ' .'Stores');
		$categories_list = getCategoryLists(2);
		$banners = get_store_banner_list(1);
		return view('front.'.$this->theme.'.store_list')->with('store', $store)->with('categories', $categories_list)->with('category_id', $categories)->with('banners', $banners);
	}
	
	public function index(Request $data)
	{
		$api = New Api;
		$post_array   = $data->all();
		$categories   = isset($post_array['category_ids'])?$post_array['category_ids']:"";
		$category_url = isset($post_array['category_url'])?$post_array['category_url']:"";
		$city         = isset($post_array['city'])?$post_array['city']:"";
		$user_id      = Session::get('user_id');
		$location     = "";
		if(isset($post_array['location']))
		{
			$location = $post_array['location'];
			Session::put('location', $post_array['location']);
		}
		if(isset($post_array['city']))
		{
			$city = $post_array['city'];
			Session::put('city', $post_array['city']);
		}
		$store_array  = array("city" => $city, "location" => $location,"language" => getCurrentLang(),"category_ids" =>$categories,"type" =>"web","category_url" =>$category_url,"user_id" =>$user_id);
		$method       = "POST";
		$data         = array('form_params' => $store_array);
		$response     = $api->call_api($data,'api/store_list_ajax',$method);
		$store        = $response->response;
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		Twitter::setSite(Session::get("general_site")->site_name.' - ' .'Stores');
		$categories= getCategoryLists(2);
		
		$banners = DB::table('banner_settings')->select('*')->where('banner_type', 2)->where('status', 1)->orderBy('banner_setting_id', 'desc')->get();
		return view('front.'.$this->theme.'.store_list')->with('store', $store)->with('categories', $categories)->with('banners', $banners);
	}




	public function getOpenTimings($v_id,$day_week)
	{
		$time_data = DB::table('opening_timings')
			->where("vendor_id",$v_id)
			->where("day_week",$day_week)
			->orderBy('id', 'asc')
			->get();
		$time_list=array();
		if(count($time_data)>0){
			$time_list = $time_data;
		}
		return $time_list;
	}
	
	public function get_delivery_time_interval()
	{
		$time_interval = DB::table('delivery_time_interval')
				->select('*')
				->orderBy('start_time', 'asc')
				->get();
		return $time_interval;
	}

	public function addtofavourite(Request $data)
	{
		$api = New Api;
		$post_array = $data->all();
		$user_id = Session::get('user_id');
		$token = Session::get('token');
		$store_array = array("user_id" => $user_id,"token"=>$token,"language" => getCurrentLang(),"vendor_id" =>$post_array["vendor_id"]);
		$method = "POST";
		$data = array('form_params' => $store_array);
		$response = $api->call_api($data,'api/addto_favourite',$method);
		return response()->json($response->response);	
		
	}
	
	public function store_info($outlet_url)
	{ 
		$api = New Api;
		if($outlet_url == '' )
		{
			Session::flash('message', 'Invalid Store'); 
			return Redirect::to('/');
		}
		 //$language_id =getcurrentlanguage();
		$vendors = DB::table('outlets')
					->select('outlets.vendor_id','outlets.id as outlet_id')
					->join('vendors','vendors.id','=','outlets.vendor_id')
					->where('outlets.url_index','=',$outlet_url)
					->where('vendors.featured_vendor','=',1)
					->where('vendors.active_status','=',1)
					->where('outlets.active_status','=',1)
					->first();
		if(!count($vendors))
		{
			Session::flash('message', 'Invalid Store'); 
			return Redirect::to('/');
		}
		$store_id = $vendors->outlet_id;
		DB::table('outlets')->where('outlets.id','=',$store_id)->increment('view_count');
		
       $query = '"vendors_infos"."lang_id" = (case when (select count(vendors_infos.lang_id) as totalcount from vendors_infos where vendors_infos.lang_id = '.getCurrentLang().' and vendors.id = vendors_infos.id) > 0 THEN '.getCurrentLang().' ELSE 1 END)';
		$vendor = DB::table('vendors')
					->select('vendors_infos.vendor_name','vendors_infos.vendor_description')
					->leftJoin('vendors_infos','vendors_infos.id','=','vendors.id')
					->whereRaw($query)
					->where('vendors_infos.id','=',$vendors->vendor_id)
					->where('vendors.featured_vendor','=',1)
					->where('vendors.active_status','=',1)
					->get();
		$fstatus = 0;
		$vdata   = DB::table('favorite_vendors')
					->select('favorite_vendors.id','favorite_vendors.status')
					->where('favorite_vendors.customer_id','=',Session::get('user_id'))
					->where('favorite_vendors.vendor_id','=',$store_id)
					->where('favorite_vendors.status','=',1)
					->get();
		if(count($vdata))
		{
			$fstatus = $vdata[0]->status;
		}
		
		$store_array = array("language" => getCurrentLang(),"store_id" => $store_id);
		$method      = "POST";
		$data        = array('form_params' => $store_array);
		$response    = $api->call_api($data,'api/store_info',$method);
		//print_r($response);exit;
		$store       = $response->response;
		
		
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name);
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name.' - '.$vendor[0]->vendor_description);
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name);
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name);
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name.' - '.$vendor[0]->vendor_description);
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name);
		Twitter::setSite(Session::get("general_site")->site_name.' - '.$vendor[0]->vendor_name);
		$categories = getVendorsubCategoryLists($vendors->vendor_id);
		//~ $banners    = DB::table('banner_settings')->select('banner_settings')->where('banner_type', 2)->orderBy('banner_setting_id', 'desc')->get();
		$cart_item  = 0;
		if(Session::get('user_id'))
		{
			$cdata  = DB::table('cart')
						->leftJoin('cart_detail','cart_detail.cart_id','=','cart.cart_id')
						->select('cart_detail.cart_id',DB::raw('count(cart_detail.cart_detail_id) as cart_count'))
						->where("cart.user_id","=",Session::get('user_id'))
						->groupby('cart_detail.cart_id')
						->get();
			if(count($cdata))
			{
				$cart_item = $cdata[0]->cart_count;
			}
		}
		$time_interval = $this->get_delivery_time_interval();
		$date          = date('Y-m-d'); //today date
		$weekOfdays    = $week = $deliver_slot_array = array();
		for($i =1; $i <= 7; $i++)
		{
			$weekOfdays[$i] = date('d M', strtotime($date));
			$weekday        = date('l', strtotime($date));
			foreach($time_interval as $time)
			{
				$deliver_slot_array[$weekday][] = date('g:i a', strtotime($time->start_time)).' - '.date('g:i a', strtotime($time->end_time));
			}
			$week[$i] = date('l',strtotime($date));
			$date     = date('Y-m-d', strtotime('+1 day', strtotime($date)));
		} 
		$rcondtion = "(outlet_reviews.approval_status = 1)";
		$reviews   = DB::table('outlet_reviews')
						->select('outlet_reviews.comments', 'outlet_reviews.ratings', 'outlet_reviews.created_date', 'users.id', 'users.first_name', 'users.last_name', 'users.name', 'users.image')
						->leftJoin('users','users.id','=','outlet_reviews.customer_id')
						->whereRaw($rcondtion)
						->where("outlet_reviews.outlet_id", "=", $store_id)
						->orderBy('outlet_reviews.id', 'desc')//->toSql();
						->get();
						//print_r($reviews);exit;
		$timearray = getDaysWeekArray();
		$u_time    = array();
		foreach($timearray as $key1 => $val1)
		{
			$u_time[$key1] = $this->getOpenTimings($store_id,$val1);
		}
		
		$categories = getProduct_category_list($store_id);
		$category_formated = array();
		if(count($categories)>0){
			
			foreach($categories as $key => $cat){
				$subcategories = getSubCategoryListsupdated(1,$cat->category_id);
				//print_r($subcategories);
				$category_formated[$key]["category_id"]=$cat->category_id;
				$category_formated[$key]["url_key"]=$cat->url_key;
				$category_formated[$key]["category_name"]=$cat->category_name;
				$category_formated[$key]["image"]=$cat->image;
				$category_formated[$key]["subcategory"]=$subcategories;
				
			}
		}

		//print_r($category_formated); exit;

		//print_r($categories); exit;
		
		return view('front.'.$this->theme.'.store_info')->with('store', $store)->with('vcategories', $categories)->with('categories', $category_formated)->with('api', $api)->with('cart_item',$cart_item)->with('deliver_slot', $deliver_slot_array)->with('reviews', $reviews)->with('fstatus', $fstatus)->with('open_time',$u_time);//->with('banners', $banners)
	}

	public function product_list()
	{
		$outlet_key   = Input::get('url-key');
		$cate_url   = Input::get('category');
		//$outlet_key = Input::get('outlet-key');
		$api = New Api;
		$keyword    = pg_escape_string(Input::get('keyword'));
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		Twitter::setSite(Session::get("general_site")->site_name.' - ' .'Stores');
		$store_array = array("language" => getCurrentLang(), "outlet_key" => $outlet_key, "category_url" => $cate_url, "keyword" => $keyword);
		$method      = "POST";
		$data        = array('form_params' => $store_array);
		$response    = $api->call_api($data,'api/product_list',$method);
		$products    = $response->response;
		$cart_item  = 0;
		
		//print_r($response->response);exit;
		
		if(Session::get('user_id'))
		{
			$cdata = DB::table('cart')
					->leftJoin('cart_detail','cart_detail.cart_id','=','cart.cart_id')
					->select('cart_detail.cart_id',DB::raw('count(cart_detail.cart_detail_id) as cart_count'))
					->where("cart.user_id","=",Session::get('user_id'))
					->groupby('cart_detail.cart_id')
					->get();
			if(count($cdata))
			{
				$cart_item = $cdata[0]->cart_count;
			}
		}
		
		$fstatus = 0;
		$vdata   = DB::table('favorite_vendors')
					->select('favorite_vendors.id','favorite_vendors.status')
					->where('favorite_vendors.customer_id','=',Session::get('user_id'))
					->where('favorite_vendors.vendor_id','=',$vendors->vendor_id)
					->where('favorite_vendors.status','=',1)
					->get();
		if(count($vdata))
		{
			$fstatus = $vdata[0]->status;
		}
		
		//echo $fstatus;exit;
		return view('front.'.$this->theme.'.product_list')->with('products', $products)->with('cart_item', $cart_item)->with('fstatus', $fstatus);
	}
	
	public function products($category = "",$outlet = "",$category_id = "",$subcategory_id = "")
	{
		$cate_url   = $category;
		$outlet_key = $outlet;
		$subcategory   = $subcategory_id;
		$keyword    = pg_escape_string(Input::get('keyword'));
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - ' .'Stores');
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - ' .'Stores');
		Twitter::setSite(Session::get("general_site")->site_name.' - ' .'Stores');
		$api = New Api;
		$store_array = array("language" => getCurrentLang(), "outlet_key" => $outlet_key, "category_url" => $cate_url, "keyword" => $keyword,"user_id" => Session::get('user_id'),"subcategory" =>  $subcategory);
		
		$method      = "POST";
		$data        = array('form_params' => $store_array);
		$response    = $api->call_api($data,'api/product_list',$method);
		$products    = $response->response;

		//print_r($products); exit;
		//echo "<pre>";
		////print_r($products->categories);exit;
		$cart_item  = 0;
		if(Session::get('user_id'))
		{
			$cdata = DB::table('cart')
					->leftJoin('cart_detail','cart_detail.cart_id','=','cart.cart_id')
					->select('cart_detail.cart_id',DB::raw('count(cart_detail.cart_detail_id) as cart_count'))
					->where("cart.user_id","=",Session::get('user_id'))
					->groupby('cart_detail.cart_id')
					->get();
			if(count($cdata))
			{
				$cart_item = $cdata[0]->cart_count;
			}
		}
		
		if($outlet_key == '' )
		{
			Session::flash('message', 'Invalid Store'); 
			return Redirect::to('/');
		}
		$vendors = DB::table('outlets')
					->select('outlets.vendor_id','outlets.id as outlet_id')
					->join('vendors','vendors.id','=','outlets.vendor_id')
					->where('outlets.url_index','=',$outlet_key)
					->where('vendors.featured_vendor','=',1)
					->where('vendors.active_status','=',1)
					->where('outlets.active_status','=',1)
					->first();
		if(!count($vendors))
		{
			Session::flash('message', 'Invalid Store'); 
			return Redirect::to('/');
		}
		$store_id = $vendors->outlet_id;
		$category_image = getProduct_category_image($cate_url,$category_id);
		$categories = getProduct_category_list($store_id);
		$category_formated = array();
		if(count($categories)>0){
			
			foreach($categories as $key => $cat){
				$subcategories = getSubCategoryListsupdated(1,$cat->category_id);
				//print_r($subcategories);
				$category_formated[$key]["category_id"]=$cat->category_id;
				$category_formated[$key]["url_key"]=$cat->url_key;
				$category_formated[$key]["category_name"]=$cat->category_name;
				$category_formated[$key]["image"]=$cat->image;
				$category_formated[$key]["subcategory"]=$subcategories;
				
			}
		}
		//print_r($categories);exit;
		//$categories = getVendorsubCategoryLists($vendors->vendor_id);
		$query = '"vendors_infos"."lang_id" = (case when (select count(vendors_infos.lang_id) as totalcount from vendors_infos where vendors_infos.lang_id = '.getCurrentLang().' and vendors.id = vendors_infos.id) > 0 THEN '.getCurrentLang().' ELSE 1 END)';
		$vendor = DB::table('vendors')
					->select('vendors_infos.vendor_name','vendors_infos.vendor_description')
					->leftJoin('vendors_infos','vendors_infos.id','=','vendors.id')
					->whereRaw($query)
					->where('vendors_infos.id','=',$vendors->vendor_id)
					->where('vendors.featured_vendor','=',1)
					->where('vendors.active_status','=',1)
					->get();
	$fstatus = 0;
		$vdata   = DB::table('favorite_vendors')
					->select('favorite_vendors.id','favorite_vendors.status')
					->where('favorite_vendors.customer_id','=',Session::get('user_id'))
					->where('favorite_vendors.vendor_id','=',$vendors->vendor_id)
					->where('favorite_vendors.status','=',1)
					->get();
		if(count($vdata))
		{
			$fstatus = $vdata[0]->status;
		}
		$time_interval = $this->get_delivery_time_interval();
		$date          = date('Y-m-d'); //today date
		$weekOfdays    = $week = $deliver_slot_array = array();
		for($i =1; $i <= 7; $i++)
		{
			$weekOfdays[$i] = date('d M', strtotime($date));
			$weekday        = date('l', strtotime($date));
			foreach($time_interval as $time)
			{
				$deliver_slot_array[$weekday][] = date('g:i a', strtotime($time->start_time)).' - '.date('g:i a', strtotime($time->end_time));
			}
			$week[$i] = date('l',strtotime($date));
			$date     = date('Y-m-d', strtotime('+1 day', strtotime($date)));
		}
		$rcondtion = "(outlet_reviews.approval_status = 1)";
		$reviews   = DB::table('outlet_reviews')
						->select('outlet_reviews.comments', 'outlet_reviews.ratings', 'outlet_reviews.created_date', 'users.id', 'users.first_name', 'users.last_name', 'users.name', 'users.image')
						->leftJoin('users','users.id','=','outlet_reviews.customer_id')
						->whereRaw($rcondtion)
						->where("outlet_reviews.outlet_id", "=", $store_id)
						->orderBy('outlet_reviews.id', 'desc')
						->get();
		$timearray = getDaysWeekArray();
		$u_time    = array();
		foreach($timearray as $key1 => $val1)
		{
			$u_time[$key1] = $this->getOpenTimings($store_id,$val1);
		}
		return view('front.'.$this->theme.'.product_list')->with('products', $products)->with('cart_item', $cart_item)->with('deliver_slot', $deliver_slot_array)->with('reviews', $reviews)->with('fstatus', $fstatus)->with('open_time',$u_time)->with('cate_url',$cate_url)->with('outlet_key',$outlet_key)->with('categories',$category_formated)->with('category_image',$category_image);//->with('banners', $banners)
	}
	public function cms_mob($index="",$language)
	{
		$query    = '"cms_infos"."language_id" = (case when (select count(*) as totalcount from cms_infos where cms_infos.language_id = '.$language.' and cms.id = cms_infos.cms_id) > 0 THEN '.$language.' ELSE 1 END)';
		$cms_info = DB::table('cms')
					->select('cms.*','cms_infos.*')
					->leftJoin('cms_infos','cms_infos.cms_id','=','cms.id')
					->whereRaw($query)
					->where("url_index","=",$index)
					->limit(1)
					->get();
		if(!count($cms_info))
		{
			Session::flash('message', 'Invalid Page'); 
			Session::flash('alert-class', 'alert-danger'); 
			return Redirect::to('/');	
		}
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
        SEOMeta::setDescription(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
        SEOMeta::addKeyword(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
        OpenGraph::setTitle(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
        // OpenGraph::setUrl(URL::to('/'));
        Twitter::setTitle(Session::get("general_site")->site_name.' - '.$cms_info[0]->title);
        Twitter::setSite(Session::get("general_site")->site_name);
		return view('front.'.$this->theme.'.cmsinfo_mob')->with('cmsinfo', $cms_info);
	}
	public function product_info($outlet_url,$product_url)
    {   
		$api = New Api;
		$store_array = array("language" => getCurrentLang(),"product_url" => $product_url,"outlet_url" => $outlet_url);
		$method      = "POST";
		$data        = array('form_params' => $store_array);
	    $response    = $api->call_api($data,'api/product_details',$method);
		$products    = $response->response;
		//print_r($products); exit;
		if($products->httpCode == 400)
		{
			Session::flash('message', 'Invalid Product'); 
			return Redirect::to('/');
		}
		$cart_item  = 0;
		if(Session::get('user_id'))
		{
			$cdata = DB::table('cart')
					->leftJoin('cart_detail','cart_detail.cart_id','=','cart.cart_id')
					->select('cart_detail.cart_id',DB::raw('count(cart_detail.cart_detail_id) as cart_count'))
					->where("cart.user_id","=",Session::get('user_id'))
					->groupby('cart_detail.cart_id')
					->get();
			if(count($cdata))
			{
				$cart_item = $cdata[0]->cart_count;
			}
		}
		
		$product_id = $products->data->product_id;
		$rcondtion = "(product_reviews.approval_status = 1)";
		$product_reviews   = DB::table('product_reviews')
						->select('product_reviews.comments', 'product_reviews.ratings', 'product_reviews.created_date', 'users.id', 'users.first_name', 'users.last_name', 'users.name', 'users.image')
						->leftJoin('users','users.id','=','product_reviews.customer_id')
						->whereRaw($rcondtion)
						->where("product_reviews.product_id", "=", $product_id)
						->orderBy('product_reviews.id', 'desc')//->toSql();
						->get();
			
		SEOMeta::setTitle(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		SEOMeta::setDescription(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		SEOMeta::addKeyword(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		OpenGraph::setTitle(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		OpenGraph::setDescription(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		OpenGraph::setUrl(URL::to('/'));
		Twitter::setTitle(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		Twitter::setSite(Session::get("general_site")->site_name.' - '.ucfirst($products->data->product_name));
		return view('front.'.$this->theme.'.product_info')->with('products', $products)->with('product_reviews', $product_reviews)->with('cart_item', $cart_item);//->with('banners', $banners)
    }
    public function store_outlet_list(Request $data)
	{  
		Session::put('current_lat', $data->latitude); 
        Session::put('current_long', $data->longitude);
        $result = array("response" => array("httpCode" => 400, "status" => false,'Messages' => 'No outlet found'));
        $distance = 15 * 1000;
        $query = 'vendors_infos.lang_id = (case when (select count(vendors_infos.id) as totalcount from vendors_infos where vendors_infos.lang_id = ' . $data->language . ' and vendors.id = vendors_infos.id) > 0 THEN ' . $data->language. ' ELSE 1 END)';
		$query1 = 'outlet_infos.language_id = (case when (select count(outlet_infos.id) as totalcount from outlet_infos where outlet_infos.language_id = ' . $data->language . ' and outlets.id = outlet_infos.id) > 0 THEN ' . $data->language . ' ELSE 1 END)';
		$vendors = DB::select("select cities.url_index as city_url_index, zones.url_index as location_url_index, earth_distance(ll_to_earth(".$data->latitude.', '.$data->longitude."), ll_to_earth(outlets.latitude, outlets.longitude)) as distance  from  vendors  left join outlets on outlets.vendor_id =vendors.id left join outlet_infos on outlets.id = outlet_infos.id left Join cities  on cities.id = vendors.city_id left join zones on zones.city_id =vendors.city_id left join vendors_infos on vendors_infos.id = vendors.id where earth_box(ll_to_earth(".$data->latitude.', '.$data->longitude.'), '.$distance.") @> ll_to_earth(outlets.latitude, outlets.longitude)and ".$query." and ".$query1." and outlets.active_status='1' and vendors.active_status=1 and vendors.featured_vendor='1' limit 1");
		
		if(count($vendors) > 0 && !empty($data->latitude) && !empty($data->longitude))
		{
			$city_url_index=$vendors[0]->city_url_index;
		    $location_url_index=$vendors[0]->location_url_index;
			$result = array("response" => array("httpCode" => 200, "status" => true, 'Messages' => 'Location detail','city_url_index'=>$city_url_index,'location_url_index'=>$location_url_index, 'latitude' => encrypt($data->latitude), 'longitude' => encrypt($data->longitude)));
		}
		
		
		return json_encode($result,JSON_UNESCAPED_UNICODE);
	}
}
