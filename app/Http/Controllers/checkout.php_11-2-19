<?php

namespace App\Http\Controllers;
use App\Http\Requests;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Redirect;
use cast_vote\Support\Facades\Validator;
use Illuminate\Support\Facades\URL;
use JWTAuth;
use Tymon\JWTAuth\Exceptions\JWTException;
use GuzzleHttp\Client;
use DB;
use App\Model\contactus;
use App\Model\users;
use App\Model\stores;
use App\Model\settings;
use App\Model\emailsettings;
use App\Model\cms;
use App\Model\outlets;
use Session;
use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Lang;
use Illuminate\Contracts\Auth\Registrar;
use MetaTag;
use Mail;
use SEO;
use SEOMeta;
use OpenGraph;
use Twitter;
use App;
use Cart;
//use App\Http\Controllers\Api\Api;
use App\Model\api;
use Paypal;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Details;
use Braintree_Configuration;
use Braintree_Transaction;
use Braintree_ClientToken;
use Braintree_Customer;
use Illuminate\Support\Facades\Text;

class Checkout extends Controller
{
    const USERS_SIGNUP_EMAIL_TEMPLATE = 1;
    const USERS_WELCOME_EMAIL_TEMPLATE = 3;
    const COMMON_MAIL_TEMPLATE = 8;
    
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    private $_apiContext;
    public function __construct()
    {
        $this->user_details = array();
        $this->api = New Api;
        $this->client = new Client([
            // Base URI is used with relative requests
            'base_uri' => url('/'),
            // You can set any number of default request options.
            'timeout'  => 3000.0,
        ]);
        $user_details = $this->check_login();
        $this->_apiContext = PayPal::ApiContext(getAppPaymentConfig()->merchant_key,getAppPaymentConfig()->merchant_secret_key);
        $this->_apiContext->setConfig(array(
            'mode' => 'sandbox',
          'service.EndPoint' => 'https://api.sandbox.paypal.com',
           'http.ConnectionTimeOut' => 30,
           'log.LogEnabled' => true,
            'log.FileName' => storage_path('logs/paypal.log'),
            'log.LogLevel' => 'FINE'
        ));
        $this->theme = Session::get("general")->theme;
    }
    
    public function check_login()
    {
        $user_id = Session::get('user_id');
        $token = Session::get('token');
        //Session::put('token', $response->response->token);
        if(empty($user_id))
        {
            return Redirect::to('/')->send();
        }
        $user_array = array("user_id" => $user_id,"token"=>$token);
        $method = "POST";
        $data = array('form_params' => $user_array);
        $response = $this->api->call_api($data,'/api/user_detail',$method);
        if($response->response->httpCode == 400)
        {
            return Redirect::to('/')->send();
        }
        else
        {
            $this->user_details = $response->response->user_data[0];
            if($this->user_details->email == "")
            {
                Session::flash('message-failure',trans("messages.Please fill your personal details"));
                return Redirect::to('/profile')->send();
            }
            return $this->user_details;
        }
    }

    
    function GetDrivingDistance($lat1, $long1, $lat2, $long2)
    {
        $url = "https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=".$lat1.",".$long1."&destinations=".$lat2.",".$long2."&mode=driving&language=pl-PL";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $response = curl_exec($ch);
        curl_close($ch);
        $response_a = json_decode($response, true);
        $dist = $response_a['rows'][0]['elements'][0]['distance']['text'];
        $time = $response_a['rows'][0]['elements'][0]['duration']['text'];
        $dist = str_replace(',', '.', $dist);
        $distance = array('distance' => $dist, 'distance_km' => ($dist*1.609344), 'time' => $time);
        return $distance;
    }
    
    public function index()
    {
        $user_id = Session::get('user_id');
        $token = Session::get('token');
        $language = getCurrentLang();
        $user_array = array("user_id" => $user_id,"token"=>$token,"language" =>$language);
        $method = "POST";
        $data = array('form_params' => $user_array);
        $checkout_details = $this->api->call_api($data,'/api/checkout_detail',$method);
//echo '<pre>';print_r($checkout_details->response);die;      
        if($checkout_details->response->httpCode == 400)
        {
            Session::flash('message-failure', trans('messages.No cart items found'));
            return Redirect::to('/')->send();
        }

		//LATER CUSTOMISATION: no minimum amount for proceed to payment	
    	
		if($checkout_details->response->overall_minimum_order_amount > $checkout_details->response->sub_total){
            $currency_side = getCurrencyPosition()->currency_side;
            $currency_symbol = getCurrency($language);
            $error_message = trans('messages.Add ');
            if($currency_side == 1){
                $error_message .= $currency_symbol.' '.($checkout_details->response->overall_minimum_order_amount -$checkout_details->response->sub_total) ;
            } else {
                $error_message .= ($checkout_details->response->overall_minimum_order_amount -$checkout_details->response->sub_total).' '.$currency_symbol;
            }
                  $error_message .= trans('messages. to Checkout');
                   Session::flash( 'message-failure', $error_message );
                   return Redirect::to('/cart')->send();

        }
        if($checkout_details->response->remaining_amount_to_checkout > 0)
        {
			$currency_side = getCurrencyPosition()->currency_side;
			$currency_symbol = getCurrency($language);
            $error_message = trans('messages.Add ');
            if($currency_side == 1){
				$error_message .= $currency_symbol.' '.$checkout_details->response->remaining_amount_to_checkout;
			} else {
				$error_message .= $checkout_details->response->remaining_amount_to_checkout.' '.$currency_symbol;
			}
            $error_message .= trans('messages. to Checkout');
            Session::flash( 'message-failure', $error_message );
            return Redirect::to('/cart')->send();
        }
        
        $address_types[""] = trans("messages.Select address type");
        foreach ($checkout_details->response->address_type as $row)
        {
            $address_types[$row->id] = ucfirst($row->name);
        }
        SEOMeta::setTitle(Session::get('general_site')->site_name);
        SEOMeta::setDescription(Session::get('general_site')->site_name);
        SEOMeta::addKeyword(Session::get('general_site')->site_name);
        OpenGraph::setTitle(Session::get('general_site')->site_name);
        OpenGraph::setDescription(Session::get('general_site')->site_name);
        OpenGraph::setUrl(URL::to('/'));
        Twitter::setTitle(Session::get('general_site')->site_name);
        Twitter::setSite(Session::get('general_site')->site_name);
        $user_details = $this->check_login();
        return view('front.'.$this->theme.'.checkout')->with("user_details",$this->user_details)->with("checkout_details",$checkout_details->response)->with("address_types",$address_types)->with("language",$language);
    }
    public function converCurrency($from,$to,$amount){
        $url="https://finance.google.com/finance/converter?a=$amount&from=$from&to=$to";
        $request=curl_init();
        $timeOut=0;
        curl_setopt($request,CURLOPT_URL,$url);
        curl_setopt($request,CURLOPT_RETURNTRANSFER,1);
        curl_setopt($request,CURLOPT_USERAGENT,"Mozilla/4.0(compatible;MSIE8.0;Windows NT6.1)");
        curl_setopt($request,CURLOPT_CONNECTTIMEOUT,$timeOut);
        $response=curl_exec($request);
        curl_close($request);
        return $response;
    }
    
    public function proceed_checkout(Request $data)
    {
        $post_data = $data->all(); //print_r($post_data);exit;
        $user_id = Session::get('user_id');
        $token = Session::get('token');
        $language = getCurrentLang();
        $payment_gateway_id = $post_data['payment_gateway_id'];
        $user_array = array("user_id" => $user_id,"token"=>$token,"language" =>$language,"payment_gateway_id"=>$payment_gateway_id);
        $method = "POST";
        $data = array('form_params' => $user_array);
        $response = $this->api->call_api($data,'/api/get_payment_details',$method);
        $cart_detail = $response->response;
        $outlet_count = count($cart_detail->cart_items);
		$post_data['delivery_instructions'] = '';
        $cart_detail->delivery_notes = $post_data['delivery_instructions'];
        $delivery_address = (isset($post_data['delivery_address']) && ($post_data['delivery_address'] != ""))?$post_data['delivery_address']:0;
        $cart_detail->delivery_address = $delivery_address;
        
        $cart_detail->delivery_slot =  ($post_data['delivery_slot'] !="" )?$post_data['delivery_slot']:0;
        $cart_detail->delivery_date =  ($post_data['delivery_date'] !="" )?$post_data['delivery_date']:0;
        $cart_detail->delivery_cost =  ($post_data['delivery_cost'] !="" )?$post_data['delivery_cost']:0;
        $cart_detail->overall_coupon_amount =  ($post_data['promo_delivery_cost'] !="" )?$post_data['promo_delivery_cost']:0;
        $cart_detail->order_type = $post_data['order_type']; 
        $cart_detail->delivery_slot_type = $post_data['delivery_slot_type'];
        if($cart_detail->order_type == 2)
        {
            $cart_detail->delivery_cost = 0;
            $cart_detail->delivery_slot = 0;
            $cart_detail->delivery_date = "NOW()";
            $cart_detail->delivery_address = 0;
        }
		$overall_coupon_amount = 0;
		foreach($cart_detail->cart_items as $outlet){
			$outlet->coupon_id =  $post_data['coupon_id_'.$outlet->outlet_id];
			$outlet->coupon_amount = $post_data['coupon_amount_'.$outlet->outlet_id];
			$outlet->coupon_type = $post_data['coupon_type_'.$outlet->outlet_id]; 
			$overall_coupon_amount += $post_data['coupon_amount_'.$outlet->outlet_id];
		}
		$cart_detail->coupon_amount = $overall_coupon_amount;
        if($cart_detail->payment_gateway_detail->payment_type == 0)
        {
            $this->offline_payment($cart_detail);
        } else if($cart_detail->payment_gateway_detail->payment_type == 1)
        { //Paypal
        $cart_details = $cart_detail;
        $language = getCurrentLang();
        $payment_array =array();
		$payment_array['user_id'] = Session::get('user_id');
		$overall_admin_commission = 0;$total_transaction_amount = 0;
		$overall_vendor_commission = 0;$vendor_commission_percentage = 0;$vendor_commission_per= 0;
		foreach($cart_details->cart_items as $key=>$outlet){
			$payment_array['outlets'][$key]['user_id'] = $outlet->user_id;
			$payment_array['outlets'][$key]['store_id'] = $outlet->store_id;
			$payment_array['outlets'][$key]['outlet_id'] = $outlet->outlet_id;
			$payment_array['outlets'][$key]['vendor_key'] = $outlet->vendor_key;
			$payment_array['outlets'][$key]['vendor_name'] = $outlet->vendor_name;

			$items = array();
			$i = 0;
			foreach($outlet->product_list as $cartitems)
			{
				$items[$i]['product_id'] = $cartitems->product_id;
				$items[$i]['quantity'] = $cartitems->quantity;
				$items[$i]['discount_price'] = $cartitems->discount_price;
				$items[$i]['item_offer'] = 0;
				$i++;
			}
			$payment_array['outlets'][$key]['items'] = $items;

			$payment_array['outlets'][$key]['coupon_id'] = $outlet->coupon_id;
			$payment_array['outlets'][$key]['coupon_amount'] = $outlet->coupon_amount;
			$payment_array['outlets'][$key]['coupon_type'] = $outlet->coupon_type;
			$payment_array['outlets'][$key]['delivery_cost'] = $outlet->delivery_cost;
			$payment_array['outlets'][$key]['sub_total'] = $outlet->sub_total;
			$payment_array['outlets'][$key]['total'] = ($outlet->sub_total)-$outlet->coupon_amount;
                        $transaction_amount =number_format((float)($outlet->sub_total-$outlet->coupon_amount)*($cart_detail->payment_gateway_detail->commision/100)+$cart_detail->payment_gateway_detail->payment_fixed_amount,2,'.','');

			$admin_commission = ((($outlet->sub_total-$outlet->coupon_amount+$outlet->delivery_cost)* $outlet->vendor_commission)/100);
			//$admin_commission  += $admin_commission ;
                        $payment_array['outlets'][$key]['admin_commission'] = $admin_commission;
			$payment_array['outlets'][$key]['transaction_amount'] =  $transaction_amount;
                        $payment_array['outlets'][$key]['vendor_commission_percentage'] =  $outlet->vendor_commission;
			$overall_admin_commission += $admin_commission;
                        //$total_transaction_amount += $transaction_amount;
			$vendor_commission_per += $outlet->vendor_commission;
                        $vendor_commission_percentage = number_format((float)$vendor_commission_per/$outlet_count,2,'.','');
			$vendor_commission = $outlet->sub_total- ($admin_commission+$outlet->coupon_amount);
			$payment_array['outlets'][$key]['vendor_commission'] = $vendor_commission;
			$overall_vendor_commission += $vendor_commission;
		}
         $location_id='';
        $location = session::get('location');

        //print_r($location);exit;
		if(!empty($location) && ($location != 'null')){
            //echo "in";exit;

				$location_detail = Stores::get_location_detail($location, $language);
                             
                $location_id = $location_detail->zone_id;
		}
		$total_amount = ($cart_details->sub_total+$cart_details->delivery_cost)-$cart_details->coupon_amount;
		$total_transaction_amount = number_format((float)$total_amount*($cart_detail->payment_gateway_detail->commision/100)+$cart_detail->payment_gateway_detail->payment_fixed_amount,2,'.','');
		Session::put('total_amt',$total_amount);
		$payment_array['total'] = $total_amount;
		$payment_array['transacttion_amount'] =$total_transaction_amount;
		$payment_array['total_without_coupon'] = $cart_details->sub_total+$cart_details->delivery_cost;
		$payment_array['sub_total'] = $cart_details->sub_total;
		$payment_array['coupon_amount'] = $cart_details->coupon_amount;
		$payment_array['admin_commission'] = $overall_admin_commission;
		$payment_array['vendor_commission'] = $overall_vendor_commission+$cart_details->delivery_cost;
		$payment_array['vendor_commission_percentage'] =$vendor_commission_per;
		$payment_array['order_status'] = 1;
		$payment_array['order_key'] = str_random(32);
		$payment_array['invoice_id'] = str_random(32);
		$payment_array['transaction_id'] = str_random(32);
		$payment_array['transaction_staus'] = 1;
		$payment_array['transaction_amount'] = $total_transaction_amount;
		$payment_array['payer_id'] = str_random(32);
		$payment_array['currency_code'] = getCurrency($language);
		$payment_array['payment_gateway_id'] = $cart_details->payment_gateway_detail->id;
		$payment_array['coupon_type'] = 0;
		$payment_array['delivery_charge'] = 0;
		$payment_array['payment_status'] = 0;
		$payment_array['payment_gateway_commission'] = $cart_details->payment_gateway_detail->commision;
		$payment_array['delivery_instructions'] = $cart_details->delivery_notes;
		$payment_array['delivery_address'] = $cart_details->delivery_address;
		$payment_array['delivery_slot'] = $cart_details->delivery_slot;
		$payment_array['delivery_date'] = $cart_details->delivery_date;
		$payment_array['order_type'] = $cart_details->order_type;
		$payment_array['delivery_cost'] = $cart_details->delivery_cost;
		$payment_array['delivery_slot_type'] =  $cart_details->delivery_slot_type;
        $payment_array['overall_coupon_amount'] =  $cart_details->overall_coupon_amount;
		$payment_array['currency_side']      = getCurrencyPosition()->currency_side;
                $payment_array['location_id']      =  $location_id;
		$to_currency = "USD";
		$from_currency   = getCurrencycode();
		$amount        = urlencode($total_amount);
		$from_currency = urlencode($from_currency);
		$to_currency   = urlencode($to_currency);
		/*$get           = file_get_contents("https://finance.google.com/finance/converter?a=$amount&from=$from_currency&to=$to_currency");
		$get = explode("<span class=bld>",$get);
		$converted_amount = $total_amount;
		if(isset($get[1]))
		{
			$get = explode("</span>",$get[1]);
			if(isset($get[0]))
			{
				$converted_amount = preg_replace("/[^0-9\.]/", null, $get[0]);
			}
		}*/

 /*$request ='https://free.currencyconverterapi.com/api/v5/convert?q='.$from_currency.'_'.$to_currency.'&compact=y&callback=jQuery203017817078931262786_1521607731806&_=1521607731810';
                $file_contents = file_get_contents($request);
                    if(!empty($file_contents))
                    {
                        $file_contents = explode(':',$file_contents);
                        $result = substr($file_contents[2], 0, 5);
                        if(!empty($result))
                        {
                            $converted_amount = $result*$amount;
                            $result = array("response" => array("httpCode" => 200, "status" => "Success", "Message" => trans("messages.Currency converted successfully"), "converted_amount" => $converted_amount, "to_currency" => 'USD'));
                        }
                        else
                        {
                            $result = array("response" => array("httpCode" => 400, "status" => "Failure", "Message" => trans("messages.Currency converted failed")));

                        }
                    }
		
		$total_amount = round($converted_amount,2);*/
                $payment_array['total_amount']      = $total_amount;
	//echo "<pre>";print_r($payment_array);
		//if(!empty($payment_array))
                //{
                     Session::put('checkout_info',$payment_array);
                     $result_array = array("httpCode" =>200 , "Response"=> 1 ,"total_amount" =>$total_amount);
                    
                    
                //}else{
                  //   $result_array = array("httpCode" =>400 , "Message" => "Something went wrong", "Response"=> 2 );
                    
                //}
                 return json_encode($result_array);
        } else if($cart_detail->payment_gateway_detail->payment_type == 2) { //PayFort
            $redirectUrl = $this->online_payment_payfort($cart_detail);
//			return redirect()->to($redirectUrl);
/*
dd($redirectUrl);
			$user_id = Session::get('user_id');
			$user_email = Session::get('email');
			$merchant_reference = str_random(16);
			$lang = App::getLocale(); //getCurrentLang();
			$return_url = url("/")."/checkout/thankyou";
			$cart_details  = $cart_detail;
            //print_r($cart_details);exit;
            $payment_array = array();
            $total_amount  = ($cart_details->sub_total+$cart_details->delivery_cost)-$cart_details->coupon_amount;
            $admin_commission  = (($cart_details->sub_total * $cart_details->payment_gateway_detail->commision)/100);
            $vendor_commission = $cart_details->sub_total - $admin_commission;
            $payment_array['admin_commission']   = ($admin_commission + $cart_details->tax + $cart_details->delivery_cost);
            $payment_array['vendor_commission']  = $vendor_commission;
            $payment_array['user_id']            = $cart_details->cart_items[0]->user_id;
            $payment_array['store_id']           = $cart_details->cart_items[0]->store_id;
            $payment_array['outlet_id']          = $cart_details->cart_items[0]->outlet_id;
            $payment_array['vendor_name']         = $cart_details->cart_items[0]->vendor_name;
            $payment_array['total']              = $total_amount;
            $payment_array['sub_total']          = $cart_details->sub_total;
           // $payment_array['service_tax']        = $cart_details->tax;
             // $payment_array['tax_amount']        = $cart_details->tax_amount;
            $payment_array['order_status']       = 1;
            $payment_array['order_key']          = str_random(32);
            //$payment_array['invoice_id']       = 'INV'.str_random(8).time();
            $payment_array['transaction_id']     = str_random(32);
            $payment_array['transaction_staus']  = 1;
            $payment_array['transaction_amount'] = $total_amount;
            $payment_array['payer_id']           = str_random(32);
            $payment_array['currency_code']      = getCurrency($language);
            $payment_array['currency_side']      = getCurrencyPosition()->currency_side;
            $payment_array['payment_gateway_id'] = $cart_details->payment_gateway_detail->id;
            $payment_array['coupon_type']        = 0;
            $payment_array['delivery_charge']    = 0;
            $payment_array['payment_status']     = 0;
            $payment_array['payment_gateway_commission'] = 0;
            $payment_array['delivery_instructions'] = $cart_details->delivery_notes;
            $payment_array['delivery_address']      = $cart_details->delivery_address;
            $payment_array['delivery_slot'] = $cart_details->delivery_slot;
            $payment_array['delivery_date'] = $cart_details->delivery_date;
            $payment_array['order_type']    = $cart_details->order_type;
            $payment_array['coupon_id']     = $cart_details->coupon_id;
            $payment_array['coupon_amount'] = $cart_details->coupon_amount;
            $payment_array['coupon_type'] = $cart_details->coupon_type;
            $payment_array['delivery_cost'] = $cart_details->delivery_cost;
            $payment_array['delivery_slot_type'] =  $cart_detail->delivery_slot_type;
            $items = array();
            $i     = 0;
            foreach($cart_details->cart_items as $cartitems)
            {
                $items[$i]['product_id'] = $cartitems->product_id;
                $items[$i]['quantity'] = $cartitems->quantity;
                $items[$i]['discount_price'] = $cartitems->discount_price;
                $items[$i]['item_offer'] = 0;
                $i++;
            }
            $payment_array['items'] = $items;
            Session::put('checkout_info',$payment_array);
            //print_r($payment_array);exit;
            $total_new_amount = $total_amount*100;
            $str = "adserefdseraccess_code=".$cart_detail->payment_gateway_detail->merchant_key."amount=".$total_new_amount."command=PURCHASEcurrency=".$cart_detail->payment_gateway_detail->currency_code."customer_email=".$user_email."language=".$lang."merchant_identifier=".$cart_detail->payment_gateway_detail->account_id."merchant_reference=".$merchant_reference."payment_option=MASTERCARDadserefdser";
			$signature = hash('sha256', $str);
			$signature = hash('sha256', $str);
			$requestParams = array(
				'access_code' => $cart_detail->payment_gateway_detail->merchant_key,
				'amount' => $total_new_amount,
				'currency' => $cart_detail->payment_gateway_detail->currency_code,
				'customer_email' => $user_email,
				'merchant_reference' => $merchant_reference,
				'language' => $lang,
				'merchant_identifier' => $cart_detail->payment_gateway_detail->account_id,
				'signature' => $signature,
				'command' => 'PURCHASE',
				'payment_option' => 'MASTERCARD',
			);
			if($cart_detail->payment_gateway_detail->payment_mode==1){
				$redirectUrl = 'https://sbcheckout.payfort.com/FortAPI/paymentPage';
			} else {
				$redirectUrl = 'https://checkout.payfort.com/FortAPI/paymentPage';
			}
			echo "<html xmlns='http://www.w3.org/1999/xhtml'>\n<head></head>\n<body>\n";
			echo "<form action='$redirectUrl' method='post' name='frm'>\n";
			foreach ($requestParams as $a => $b) {
				echo "\t<input type='hidden' name='".htmlentities($a)."' value='".htmlentities($b)."'>\n";
			}
			echo "\t<script type='text/javascript'>\n";
			echo "\t\tdocument.frm.submit();\n";
			echo "\t</script>\n";
			echo "</form>\n</body>\n</html>";
*/            
		}
    }
    public function getDone(Request $request)
    {
        $checkout_info = Session::get('checkout_info');
        if($checkout_info=='')
        {
            Session::flash('message', 'Error: Oops. Something went wrong. Please try again later.'); 
            return Redirect::to('/');
        }
        $id    = $request->get('paymentId');
        $token = $request->get('token');
        $payer_id = $request->get('PayerID');
        $all_info = Paypal::getAll(array('count' => 1, 'start_index' => 0), $this->_apiContext);

        /** get payment request responce  **/
            $payment = PayPal::getById($id, $this->_apiContext);
            $paymentExecution = PayPal::PaymentExecution();
            $paymentExecution->setPayerId($payer_id);
            $executePayment = $payment->execute($paymentExecution, $this->_apiContext);
        /** get payment request responce  **/
        //Session::put('checkout_info','');
        if(isset($executePayment->state) && $executePayment->state=="approved")
        {
            $Id=$executePayment->getId();
            $Intent=$executePayment->getIntent();
            $Payer=$executePayment->getPayer();
            $Payee=$executePayment->getPayee();
            $Cart=$executePayment->getCart();
            $payment_method = $executePayment->payer->payment_method;
            $paypal_email = $executePayment->payer->payer_info->email;
            $country_code = $executePayment->payer->payer_info->country_code;
            $Transactions=$executePayment->getTransactions();
            $PaymentInstruction=$executePayment->getPaymentInstruction();
            $State=$executePayment->getState();
            $ExperienceProfileId=$executePayment->getExperienceProfileId();
            $CreateTime=$executePayment->getCreateTime();
            $UpdateTime=$executePayment->getUpdateTime();
            $ApprovalLink=$executePayment->getApprovalLink();
            $all_data=$executePayment->get($id, $this->_apiContext);
            $payment_params='';
            if(isset($Transactions['0']) && $Transactions['0']!='')
            {
                $related_resource=$Transactions['0']->related_resources;
                //print_r($related_resource);exit;
                foreach($related_resource as $key => $value)
                {
                    /** get payment transaction responce  **/
                    $payment_id=$value->sale->id;
                    $payment_state=$value->sale->state;
                    $payment_amount=$value->sale->amount;
                    $payment_mode=$value->sale->payment_mode;
                    //$reason_code=$value->state->reason_code;
                    $protection_eligibility=$value->sale->protection_eligibility;
                    $protection_eligibility=$value->sale->protection_eligibility_type;
                    $parent_payment=$value->sale->parent_payment;
                    $create_time=$value->sale->create_time;
                    $update_time=$value->sale->update_time;
                    $links=$value->sale->links;
                    /** get payment transaction responce  end **/

                    /** set payment_params  */
                    $payment_params = array("parent_payment_id"=>$Id,"token"=>$token,"payer_id"=>$payer_id,"Intent"=>$Intent,"Payee"=>$Payee,"cart_id"=>$Cart,"payment_id"=>$payment_id,"payment_state"=>$State,"payment_amount"=>$payment_amount,"payment_mode"=>$payment_mode,"create_time"=>$create_time,"update_time"=>$update_time,"links"=>$links,'payment_method'=>$payment_method,'paypal_email'=>$paypal_email,'country_code'=>$country_code);
                    /** set payment_params  end*/
                    $user_id = Session::get('user_id');
                    $token = Session::get('token');
                    $language = getCurrentLang();
                    $checkout_info = json_encode($checkout_info);
                    $payment_params = json_encode($payment_params);
                    // print_r($payment_params);exit;
                    $user_array = array("user_id" => $user_id,"token"=>$token,"language"=>$language,"payment_array" =>$checkout_info,"payment_params"=>$payment_params);
                   
                    $method = "POST";
                    $data = array('form_params' => $user_array);
                    $response = $this->api->call_api($data,'/api/online_payment',$method);
                   if($response->response->httpCode == 200)
                    {
                        Session::flash('message-success', trans('messages.Order placed successfully'));
                        return Redirect::to('/thankyou/'.encrypt($response->response->order_id))->send();
                    }
                    else
                    {
                        Session::flash('message-failure', $response->response->Message);
                        return Redirect::to('/checkout')->send();
                    }
                }
            }
            else
            {
                Session::flash('message', 'Error:PaymentSuccess Oops. Something went wrong. Please try again later.'); 
                return Redirect::to('/');
            }
        }
    }
    
    public  function getCancel()
    {
        //echo "asdfasdf";exit;
        Session::flash('message', 'Error:Proccess has been cancelled by user.'); 
        return Redirect::to('/checkout');
    }
    public function getDonePayFort(Request $request)
    {
        $checkout_info = Session::get('checkout_info');
        if($checkout_info=='')
        {
            Session::flash('message', 'Error: Oops. Something went wrong. Please try again later.'); 
            return Redirect::to('/');
        }
        $payfort_response    = $request;
        /** get payment request responce  **/
        //Session::put('checkout_info','');
        if((isset($payfort_response->response_code) && $payfort_response->response_code==14000) && (isset($payfort_response->response_message) && $payfort_response->response_message=='Success') && (isset($payfort_response->status) && $payfort_response->status==14)) {
			/** set payment_params  */
			$payment_params = array("amount"=>$payfort_response->get("amount"),
			"response_code"=>$payfort_response->get("response_code"),
			"card_number"=>$payfort_response->get("card_number"),
			"signature"=>$payfort_response->get("signature"),
			"merchant_identifier"=>$payfort_response->get("merchant_identifier"),
			"expiry_date"=>$payfort_response->get("expiry_date"),
			"access_code"=>$payfort_response->get("access_code"),
			"payment_option"=>$payfort_response->get("payment_option"),
			"customer_ip"=>$payfort_response->get("customer_ip"),
			"language"=>$payfort_response->get("language"),
			"eci"=>$payfort_response->get("eci"),
			"fort_id"=>$payfort_response->get("fort_id"),
			"command"=>$payfort_response->get("command"),
			"payment_method"=>'credit card',
			"response_message"=>$payfort_response->get("response_message"),
			'authorization_code'=>$payfort_response->get("authorization_code"),
			'customer_email'=>$payfort_response->get("customer_email"),
			'merchant_reference'=>$payfort_response->get("merchant_reference"),
			'token_name'=>$payfort_response->get("token_name"),
			'currency'=>$payfort_response->get("currency"),
			'status'=>$payfort_response->get("status"),
			'sdk_token'=>'');
		   
			$user_id  = Session::get('user_id');
			$token    = Session::get('token');
			$language = getCurrentLang();
			$checkout_info  = json_encode($checkout_info);
			$payment_params = json_encode($payment_params);
			$user_array = array("user_id" => $user_id,"token"=>$token,"language"=>$language,"payment_array" =>$checkout_info,"payment_params"=>$payment_params);
			//print_r($user_array);exit;
			$method = "POST";
			$data   = array('form_params' => $user_array);
			//~ echo '<pre>';print_r($user_array);die;
			$response = $this->api->call_api($data,'api/online_payment',$method);
			//echo '<pre>';print_r($response);die;
			if($response->response->httpCode == 200) {
				Session::flash('message-success', trans('messages.Your order has been placed successfully'));
				return Redirect::to('/thankyou/'.encrypt($response->response->order_id))->send();
			} else {
				Session::flash('message-failure', $response->response->Message);
				return Redirect::to('/checkout')->send();
			}
		} else {
			Session::flash('message', 'Oops. Something went wrong. Please try again later.'); 
			return Redirect::to('/');
		}
    }
    
    public function offline_payment($cart_details)
    {
        $language = getCurrentLang();
        $payment_array =array();
		$payment_array['user_id'] = Session::get('user_id');
		$overall_admin_commission = 0;
		$overall_vendor_commission = 0;
		foreach($cart_details->cart_items as $key=>$outlet){
			$payment_array['outlets'][$key]['user_id'] = $outlet->user_id;
			$payment_array['outlets'][$key]['store_id'] = $outlet->store_id;
			$payment_array['outlets'][$key]['outlet_id'] = $outlet->outlet_id;
			$payment_array['outlets'][$key]['vendor_key'] = $outlet->vendor_key;
			$payment_array['outlets'][$key]['vendor_name'] = $outlet->vendor_name;

			$items = array();
			$i = 0;
			foreach($outlet->product_list as $cartitems)
			{
				$items[$i]['product_id'] = $cartitems->product_id;
				$items[$i]['quantity'] = $cartitems->quantity;
				$items[$i]['discount_price'] = $cartitems->discount_price;
				$items[$i]['item_offer'] = 0;
				$i++;
			}
			$payment_array['outlets'][$key]['items'] = $items;

			$payment_array['outlets'][$key]['coupon_id'] = $outlet->coupon_id;
			$payment_array['outlets'][$key]['coupon_amount'] = $outlet->coupon_amount;
			$payment_array['outlets'][$key]['coupon_type'] = $outlet->coupon_type;
			$payment_array['outlets'][$key]['delivery_cost'] = $outlet->delivery_cost;
			$payment_array['outlets'][$key]['sub_total'] = $outlet->sub_total;
			$payment_array['outlets'][$key]['total'] = ($outlet->sub_total+$outlet->delivery_cost)-$outlet->coupon_amount;

			$admin_commission = ((($outlet->sub_total - $outlet->coupon_amount) * $cart_details->payment_gateway_detail->commision)/100);
			$admin_commission  += $outlet->delivery_cost;
			$payment_array['outlets'][$key]['admin_commission'] = $admin_commission;
			$overall_admin_commission += $admin_commission;
			$vendor_commission = $outlet->sub_total - $outlet->coupon_amount - $admin_commission;
			$payment_array['outlets'][$key]['vendor_commission'] = $vendor_commission;
			$overall_vendor_commission += $vendor_commission;
		}
		$total_amount = ($cart_details->sub_total+$cart_details->delivery_cost)-$cart_details->coupon_amount;
		$payment_array['total'] = $total_amount;
		$payment_array['total_without_coupon'] = $cart_details->sub_total+$cart_details->delivery_cost;
		$payment_array['sub_total'] = $cart_details->sub_total;
		$payment_array['coupon_amount'] = $cart_details->coupon_amount;
		$payment_array['admin_commission'] = $overall_admin_commission;
		$payment_array['vendor_commission'] = $overall_vendor_commission;
		$payment_array['order_status'] = 1;
		$payment_array['order_key'] = str_random(32);
		$payment_array['invoice_id'] = str_random(32);
		$payment_array['transaction_id'] = str_random(32);
		$payment_array['transaction_staus'] = 1;
		$payment_array['transaction_amount'] = $total_amount;
		$payment_array['payer_id'] = str_random(32);
		$payment_array['currency_code'] = getCurrency($language);
		$payment_array['payment_gateway_id'] = $cart_details->payment_gateway_detail->id;
		$payment_array['coupon_type'] = 0;
		$payment_array['delivery_charge'] = 0;
		$payment_array['payment_status'] = 0;
		$payment_array['payment_gateway_commission'] = $cart_details->payment_gateway_detail->commision;
		$payment_array['delivery_instructions'] = $cart_details->delivery_notes;
		$payment_array['delivery_address'] = $cart_details->delivery_address;
		$payment_array['delivery_slot'] = $cart_details->delivery_slot;
		$payment_array['delivery_date'] = $cart_details->delivery_date;
		$payment_array['order_type'] = $cart_details->order_type;
		$payment_array['delivery_cost'] = $cart_details->delivery_cost;
		$payment_array['delivery_slot_type'] =  $cart_details->delivery_slot_type;
      
        $payment_array = json_encode($payment_array);
    
        $user_id = Session::get('user_id');
        $token = Session::get('token');
        
        $user_array = array("user_id" => $user_id,"token"=>$token,"language"=>$language,"payment_array" =>$payment_array);
        $method = "POST";
        $data = array('form_params' => $user_array);
        $response = $this->api->call_api($data,'/api/offline_payment',$method);
        if(isset($response->response->httpCode) && $response->response->httpCode == 200)
        {
            Session::flash('message-success', trans('messages.Order placed successfully'));
            return Redirect::to('/thankyou/'.encrypt($response->response->order_id))->send();
        }
        else
        {
            Session::flash('message-failure', $response->response->Message);
            return Redirect::to('/checkout')->send();
        }
    }
    public function online_payment_paypal($cart_details)
    {
        $language = getCurrentLang();
        $payment_array =array();
		$payment_array['user_id'] = Session::get('user_id');
		$overall_admin_commission = 0;
		$overall_vendor_commission = 0;
		foreach($cart_details->cart_items as $key=>$outlet){
			$payment_array['outlets'][$key]['user_id'] = $outlet->user_id;
			$payment_array['outlets'][$key]['store_id'] = $outlet->store_id;
			$payment_array['outlets'][$key]['outlet_id'] = $outlet->outlet_id;
			$payment_array['outlets'][$key]['vendor_key'] = $outlet->vendor_key;
			$payment_array['outlets'][$key]['vendor_name'] = $outlet->vendor_name;

			$items = array();
			$i = 0;
			foreach($outlet->product_list as $cartitems)
			{
				$items[$i]['product_id'] = $cartitems->product_id;
				$items[$i]['quantity'] = $cartitems->quantity;
				$items[$i]['discount_price'] = $cartitems->discount_price;
				$items[$i]['item_offer'] = 0;
				$i++;
			}
			$payment_array['outlets'][$key]['items'] = $items;

			$payment_array['outlets'][$key]['coupon_id'] = $outlet->coupon_id;
			$payment_array['outlets'][$key]['coupon_amount'] = $outlet->coupon_amount;
			$payment_array['outlets'][$key]['coupon_type'] = $outlet->coupon_type;
			$payment_array['outlets'][$key]['delivery_cost'] = $outlet->delivery_cost;
			$payment_array['outlets'][$key]['sub_total'] = $outlet->sub_total;
			$payment_array['outlets'][$key]['total'] = ($outlet->sub_total+$outlet->delivery_cost)-$outlet->coupon_amount;

			$admin_commission = ((($outlet->sub_total - $outlet->coupon_amount) * $cart_details->payment_gateway_detail->commision)/100);
			$admin_commission  += $outlet->delivery_cost;
			$payment_array['outlets'][$key]['admin_commission'] = $admin_commission;
			$overall_admin_commission += $admin_commission;
			$vendor_commission = $outlet->sub_total - $outlet->coupon_amount - $admin_commission;
			$payment_array['outlets'][$key]['vendor_commission'] = $vendor_commission;
			$overall_vendor_commission += $vendor_commission;
		}
		$total_amount = ($cart_details->sub_total+$cart_details->delivery_cost)-$cart_details->coupon_amount;
		$payment_array['total'] = $total_amount;
		$payment_array['total_without_coupon'] = $cart_details->sub_total+$cart_details->delivery_cost;
		$payment_array['sub_total'] = $cart_details->sub_total;
		$payment_array['coupon_amount'] = $cart_details->coupon_amount;
		$payment_array['admin_commission'] = $overall_admin_commission;
		$payment_array['vendor_commission'] = $overall_vendor_commission;
		$payment_array['order_status'] = 1;
		$payment_array['order_key'] = str_random(32);
		$payment_array['invoice_id'] = str_random(32);
		$payment_array['transaction_id'] = str_random(32);
		$payment_array['transaction_staus'] = 1;
		$payment_array['transaction_amount'] = $total_amount;
		$payment_array['payer_id'] = str_random(32);
		$payment_array['currency_code'] = getCurrency($language);
		$payment_array['payment_gateway_id'] = $cart_details->payment_gateway_detail->id;
		$payment_array['coupon_type'] = 0;
		$payment_array['delivery_charge'] = 0;
		$payment_array['payment_status'] = 0;
		$payment_array['payment_gateway_commission'] = $cart_details->payment_gateway_detail->commision;
		$payment_array['delivery_instructions'] = $cart_details->delivery_notes;
		$payment_array['delivery_address'] = $cart_details->delivery_address;
		$payment_array['delivery_slot'] = $cart_details->delivery_slot;
		$payment_array['delivery_date'] = $cart_details->delivery_date;
		$payment_array['order_type'] = $cart_details->order_type;
		$payment_array['delivery_cost'] = $cart_details->delivery_cost;
		$payment_array['delivery_slot_type'] =  $cart_details->delivery_slot_type;
        $payment_array['overall_coupon_amount'] =  $cart_details->overall_coupon_amount;


		$payment_array['currency_side']      = getCurrencyPosition()->currency_side;


		$to_currency = "USD";
		$from_currency   = getCurrencycode();
		$amount        = urlencode($total_amount);
		$from_currency = urlencode($from_currency);
		$to_currency   = urlencode($to_currency);
		$get           = file_get_contents("https://finance.google.com/finance/converter?a=$amount&from=$from_currency&to=$to_currency");
		$get = explode("<span class=bld>",$get);
		$converted_amount = $total_amount;
		if(isset($get[1]))
		{
			$get = explode("</span>",$get[1]);
			if(isset($get[0]))
			{
				$converted_amount = preg_replace("/[^0-9\.]/", null, $get[0]);
			}
		}
		$total_amount = round($converted_amount,2);
		Session::put('checkout_info',$payment_array);
		$paypal=Paypal::getAll(array('count' => 1, 'start_index' => 0), $this->_apiContext);
		try {
			$payer = PayPal::Payer();
			$payer->setPaymentMethod('paypal');
			$amount = PayPal:: Amount();
			$amount->setCurrency('USD');
			$amount->setTotal($total_amount);//->setDetails($details);
			$itemList = new ItemList(); 
		 
			$transaction = PayPal::Transaction();
			$transaction->setAmount($amount);
			$info ='Place order - Pay on $ '.$total_amount;
			$transaction->setDescription($info)->setItemList($itemList);
			$redirectUrls = PayPal:: RedirectUrls();
			$redirectUrls->setReturnUrl(route('getDone'));
			$redirectUrls->setCancelUrl(route('getCancel'));
			$payment = PayPal::Payment();
			$payment->setIntent('sale');
			$payment->setPayer($payer);
			$payment->setRedirectUrls($redirectUrls);
			$payment->setTransactions(array($transaction));
			$response = $payment->create($this->_apiContext);
			$redirectUrl = $response->links[1]->href;
			return $redirectUrl;
		}
		catch(Exception $ex) 
		{
			ResultPrinter::printError("Created Payment Using PayPal. Please visit the URL to Approve.", "Payment", null, $request, $ex); exit(1);
		}
		Session::flash('message', 'Error: Oops. Something went wrong. Please try again later.'); 
		return Redirect::to('/');
    }
    public function online_payment_payfort($cart_details)
    {
        $language = getCurrentLang();
        $payment_array =array();
		$payment_array['user_id'] = Session::get('user_id');
		$overall_admin_commission = 0;
		$overall_vendor_commission = 0;
		foreach($cart_details->cart_items as $key=>$outlet){
			$payment_array['outlets'][$key]['user_id'] = $outlet->user_id;
			$payment_array['outlets'][$key]['store_id'] = $outlet->store_id;
			$payment_array['outlets'][$key]['outlet_id'] = $outlet->outlet_id;
			$payment_array['outlets'][$key]['vendor_key'] = $outlet->vendor_key;
			$payment_array['outlets'][$key]['vendor_name'] = $outlet->vendor_name;

			$items = array();
			$i = 0;
			foreach($outlet->product_list as $cartitems)
			{
				$items[$i]['product_id'] = $cartitems->product_id;
				$items[$i]['quantity'] = $cartitems->quantity;
				$items[$i]['discount_price'] = $cartitems->discount_price;
				$items[$i]['item_offer'] = 0;
				$i++;
			}
			$payment_array['outlets'][$key]['items'] = $items;

			$payment_array['outlets'][$key]['coupon_id'] = $outlet->coupon_id;
			$payment_array['outlets'][$key]['coupon_amount'] = $outlet->coupon_amount;
			$payment_array['outlets'][$key]['coupon_type'] = $outlet->coupon_type;
			$payment_array['outlets'][$key]['delivery_cost'] = $outlet->delivery_cost;
			$payment_array['outlets'][$key]['sub_total'] = $outlet->sub_total;
			$payment_array['outlets'][$key]['total'] = ($outlet->sub_total+$outlet->delivery_cost)-$outlet->coupon_amount;

			$admin_commission = ((($outlet->sub_total - $outlet->coupon_amount) * $cart_details->payment_gateway_detail->commision)/100);
			$admin_commission  += $outlet->delivery_cost;
			$payment_array['outlets'][$key]['admin_commission'] = $admin_commission;
			$overall_admin_commission += $admin_commission;
			$vendor_commission = $outlet->sub_total - $outlet->coupon_amount - $admin_commission;
			$payment_array['outlets'][$key]['vendor_commission'] = $vendor_commission;
			$overall_vendor_commission += $vendor_commission;
		}
		$total_amount = ($cart_details->sub_total+$cart_details->delivery_cost)-$cart_details->coupon_amount;
		$payment_array['total'] = $total_amount;
		$payment_array['total_without_coupon'] = $cart_details->sub_total+$cart_details->delivery_cost;
		$payment_array['sub_total'] = $cart_details->sub_total;
		$payment_array['coupon_amount'] = $cart_details->coupon_amount;
		$payment_array['admin_commission'] = $overall_admin_commission;
		$payment_array['vendor_commission'] = $overall_vendor_commission;
		$payment_array['order_status'] = 1;
		$payment_array['order_key'] = str_random(32);
		$payment_array['invoice_id'] = str_random(32);
		$payment_array['transaction_id'] = str_random(32);
		$payment_array['transaction_staus'] = 1;
		$payment_array['transaction_amount'] = $total_amount;
		$payment_array['payer_id'] = str_random(32);
		$payment_array['currency_code'] = getCurrency($language);
		$payment_array['payment_gateway_id'] = $cart_details->payment_gateway_detail->id;
		$payment_array['coupon_type'] = 0;
		$payment_array['delivery_charge'] = 0;
		$payment_array['payment_status'] = 0;
		$payment_array['payment_gateway_commission'] = $cart_details->payment_gateway_detail->commision;
		$payment_array['delivery_instructions'] = $cart_details->delivery_notes;
		$payment_array['delivery_address'] = $cart_details->delivery_address;
		$payment_array['delivery_slot'] = $cart_details->delivery_slot;
		$payment_array['delivery_date'] = $cart_details->delivery_date;
		$payment_array['order_type'] = $cart_details->order_type;
		$payment_array['delivery_cost'] = $cart_details->delivery_cost;
		$payment_array['delivery_slot_type'] =  $cart_details->delivery_slot_type;

		$payment_array['currency_side']      = getCurrencyPosition()->currency_side;
        $lang = App::getLocale();
		$user_email = Session::get('email');
		$merchant_reference = str_random(16);
		Session::put('checkout_info',$payment_array);

		$total_new_amount = $total_amount*100;
		$str = "adserefdseraccess_code=".$cart_details->payment_gateway_detail->merchant_key."amount=".$total_new_amount."command=PURCHASEcurrency=".$cart_details->payment_gateway_detail->currency_code."customer_email=".$user_email."language=".$lang."merchant_identifier=".$cart_details->payment_gateway_detail->account_id."merchant_reference=".$merchant_reference."payment_option=MASTERCARDadserefdser";
		$signature = hash('sha256', $str);
		$requestParams = array(
			'access_code' => $cart_details->payment_gateway_detail->merchant_key,
			'amount' => $total_new_amount,
			'currency' => $cart_details->payment_gateway_detail->currency_code,
			'customer_email' => $user_email,
			'merchant_reference' => $merchant_reference,
			'language' => $lang,
			'merchant_identifier' => $cart_details->payment_gateway_detail->account_id,
			'signature' => $signature,
			'command' => 'PURCHASE',
			'payment_option' => 'MASTERCARD',
		);
		if($cart_details->payment_gateway_detail->payment_mode==1){
			$redirectUrl = 'https://sbcheckout.payfort.com/FortAPI/paymentPage';
		} else {
			$redirectUrl = 'https://checkout.payfort.com/FortAPI/paymentPage';
		}
		echo "<html xmlns='http://www.w3.org/1999/xhtml'>\n<head></head>\n<body>\n";
		echo "<form action='$redirectUrl' method='post' name='frm'>\n";
		foreach ($requestParams as $a => $b) {
			echo "\t<input type='hidden' name='".htmlentities($a)."' value='".htmlentities($b)."'>\n";
		}
		echo "\t<script type='text/javascript'>\n";
		echo "\t\tdocument.frm.submit();\n";
		echo "\t</script>\n";
		echo "</form>\n</body>\n</html>";
    }
    
    
    public function update_promocode(Request $data)
    {


        $post_data = $data->all();
		$post_data['user_id']   = Session::get('user_id');
		$post_data['language']  = getCurrentLang();
		$post_data['token']     = Session::get('token');
		$method = "POST";
		$data = array('form_params' => $post_data);
		
		$checkout_details = $this->api->call_api($data,'/api/update_promocode',$method);
		//print_r($checkout_details);exit;
		return response()->json($checkout_details->response);
    }
    
    public function thankyou($id)
    {
        $order_id = decrypt($id);
        $user_id = Session::get('user_id');
        $token = Session::get('token');
        $language = getCurrentLang();
        $user_array = array("user_id" => $user_id,"token"=>$token,"language"=>$language,"order_id" =>$order_id);
        $method = "POST";
        $data = array('form_params' => $user_array);
        $response = $this->api->call_api($data,'/api/order_detail',$method);
        SEOMeta::setTitle(Session::get('general_site')->site_name);
        SEOMeta::setDescription(Session::get('general_site')->site_name);
        SEOMeta::addKeyword(Session::get('general_site')->site_name);
        OpenGraph::setTitle(Session::get('general_site')->site_name);
        OpenGraph::setDescription(Session::get('general_site')->site_name);
        OpenGraph::setUrl(URL::to('/'));
        Twitter::setTitle(Session::get('general_site')->site_name);
        Twitter::setSite(Session::get('general_site')->site_name);
        $user_details = $this->check_login();
        return view('front.'.$this->theme.'.order_confirmation')->with("user_details",$this->user_details)->with("order_items",$response->response->order_items)->with("delivery_details",$response->response->delivery_details);
    }

    
    
    public function send_otp(Request $data)
    {
        $post_data = $data->all();
        $post_data['user_id'] = Session::get('user_id');
        $post_data['language'] = getCurrentLang();
        $post_data['token'] = Session::get('token');
        $method = "POST";
        $data = array('form_params' => $post_data);
        $checkout_details = $this->api->call_api($data,'/api/send_otp',$method);
        //print_r($checkout_details);exit;
        return response()->json($checkout_details->response);
    }
    public function check_otp(Request $data)
    {
        $post_data = $data->all();
        $post_data['user_id'] = Session::get('user_id');
        $post_data['language'] = getCurrentLang();
        $post_data['token'] = Session::get('token');
        $method = "POST";
        $data = array('form_params' => $post_data);
        $checkout_details = $this->api->call_api($data,'/api/check_otp',$method);
        return response()->json($checkout_details->response);
    }
    
    public function re_order($order_id)
    {
        $order_id = decrypt($order_id);
        $post_data['user_id'] = Session::get('user_id');
        $post_data['language'] = getCurrentLang();
        $post_data['token'] = Session::get('token');
        $post_data['order_id'] = $order_id;
        $method = "POST";
        $data = array('form_params' => $post_data);
        $checkout_details = $this->api->call_api($data,'/api/re_order',$method);
        if($checkout_details->response->httpCode == 200)
        {
            Session::flash('message-success', trans('messages.Order has been added to your cart.'));
        }
        else
        {
            Session::flash('message-failure', trans('messages.Order not found'));
        }
        return Redirect::to('/checkout')->send();
    }
    
    public function cancel_order($order_id)
    {
        $order_id = decrypt($order_id);
        $post_data['user_id'] = Session::get('user_id');
        $post_data['language'] = getCurrentLang();
        $post_data['token'] = Session::get('token');
        $post_data['order_id'] = $order_id;
        $method = "POST";
        $data = array('form_params' => $post_data);
        $checkout_details = $this->api->call_api($data,'/api/cancel_order',$method);
        if($checkout_details->response->httpCode == 200)
        {
            Session::flash('message-success', trans('messages.Order cancelled successfully'));
        }
        else
        {
            Session::flash('message-failure', trans('messages.Order not found'));
        }
        return Redirect::to('/orders')->send();
    }

    public function GetDistance(Request $data)
    {
        $post_data = $data->all();
		$latitude_a   = $post_data['latitude_a'];
		$longtitude_a   = $post_data['longtitude_a'];
		$out_ids   = explode(',',$post_data['out_ids']);
         if(count($out_ids) > 0)
            {
                $i=0;
                foreach($out_ids as $out)
                {
                    $outlet_details = Outlets::find($out);
                    $out_latitude = $outlet_details->latitude;
                    $out_longtitude = $outlet_details->longitude;
                    $responce = GetDrivingDistanceNew($latitude_a,$longtitude_a,$out_latitude,$out_longtitude);
                     if($responce['status'] == 200)
                       {
                            $string = str_replace(' ', '', $responce['distance_km']);//print_r($responce['distance_km']);exit;
                            $string1=str_replace('km', '', $string);
                            $string2=str_replace('m', '', $string);
                            if (strpos($responce['distance_km'], 'km') == false) {
                                $string1 =$string2/1000.0;
                             }
                            else{
                                $string1=str_replace('km', '', $string);
                            }
                             $distance[] =  $string1;
                              $delivery_km_fixed = $this->get_delivery_settings()->delivery_km_fixed;
                             // print_r($delivery_km_fixed);exit;
                                if($string1 >$delivery_km_fixed )
                                {
                                  $result = array("response" => array("httpCode" => 400, "status" => "Failure", "km" => $distance ));
                                    return response()->json($result);

                                }
                                else{

                                    $result = array("response" => array("httpCode" => 200, "status" => "Success", "km" =>$distance ));
                                }
                        }

                    else{
                         $result = array("response" => array("httpCode" => 400, "status" => "Failure", "km" =>0 ));
                         return response()->json($result);
                         }
                         $i++;
                }
            }
                   
		return response()->json($result);
    }

 public function get_delivery_settings()
    {
        $delivery_settings = DB::table('delivery_settings')
        ->first();
        return $delivery_settings;
    }
public function Braintree()
    {
         SEOMeta::setTitle(Session::get("general_site")->site_name.' - '.'Weare hiring');
        SEOMeta::setDescription(Session::get("general_site")->site_name.' - '.'Weare hiring');
        SEOMeta::addKeyword(Session::get("general_site")->site_name.' - '.'Weare hiring');
        OpenGraph::setTitle(Session::get("general_site")->site_name.' - '.'Weare hiring');
        OpenGraph::setDescription(Session::get("general_site")->site_name.' - '.'Weare hiring');
        OpenGraph::setUrl(URL::to('/'));
        Twitter::setTitle(Session::get("general_site")->site_name.' - '.'Weare hiring');
        Twitter::setSite(Session::get("general_site")->site_name);
        return view('front.'.$this->theme.'.googlepayment');
    }
    public function Braintreepay(Request $data)
    {
		$_POST = $data->all();
		
		$checkout_info =Session::get('checkout_info'); 
		$total = $checkout_info['total'];
		//$total = 0.1;
		//echo '<pre>';print_r($checkout_info);exit;
		$user_id = Session::get('user_id'); 
		$user_detail = Users::find($user_id);
		$order_id= str_random(16);
		include_once(base_path().'/public/braintree-php-3.29.0/lib/Braintree.php');
		$Braintree_Configuration = new Braintree_Configuration;
		$params = array(
		"testmode"   => "on",
		//live
		//"merchantid" => "hmvyjss7dzvn9hsh",
	    // 	"publickey"  => "ng4z75t8hz8wjdcz",
		//"privatekey" => "a5bf6b5be62c740b125f5df41cfa2567",
		

//sandbox
		"merchantid" => "krht425cgx9p3dcp",
		"publickey"  => "6dgvz5w542wx7pv7",
		"privatekey" => "64fe6cbbbbb943b47c6efdd268da825e",
		);
		
		if ($params['testmode'] == "on")
		{
		   $Braintree_Configuration=Braintree_Configuration::environment('sandbox');
		}
		else
		{
		   $Braintree_Configuration=Braintree_Configuration::environment('production');
		}
		$Braintree_Configuration= Braintree_Configuration::merchantId($params["merchantid"]);
		$Braintree_Configuration= Braintree_Configuration::publicKey($params["publickey"]);
		$Braintree_Configuration= Braintree_Configuration::privateKey($params["privatekey"]);
		$_POST['invoiceid'] = str_random(16);
	//	$_POST['amount'] = $checkout_info['total'];
		
		
		if(isset($_POST['payment_method_nonce']))
		{
			// Customer details
			// Customer details
			$customer_firstname   = $user_detail->first_name;
			$customer_lastname    = $user_detail->last_name;
			$customer_email       = $user_detail->email;
			$customer_phonenumber =  $user_detail->mobile;
			// EOF Customer details
			// Customer billing details
			$firstname = $user_detail->first_name;
			$lastname  = $user_detail->first_name;
			$email     = $user_detail->email;
			$phone     =$user_detail->mobile;
			
			//payment method once
			$payment_method_once = $_POST['payment_method_nonce'];
			$sale = array(
						'amount'   => $_POST['amount'],
						'orderId'  => $_POST['invoiceid'],
						'paymentMethodNonce' => $_POST['payment_method_nonce'],   // Autogenerated field from braintree
						'customer' => array(
						'firstName' => $customer_firstname,
						'lastName'  => $customer_lastname,
						'phone'     => $customer_phonenumber,
						'email'     => $customer_email
						),
						'billing' => array(
						'firstName'         => $firstname,
						'lastName'          => $lastname,
						
						),
						'options' => array(
						'submitForSettlement'   => true,
						'storeInVaultOnSuccess' => true
						));
			$result = Braintree_Transaction::sale($sale);
			//echo '<pre>';print_r($sale); exit;
			if ($result->success)
			{


                $Id                 = $result->transaction->customer['id'];
                $Intent             = $result->transaction->creditCard['uniqueNumberIdentifier'];
                $Payer              = $result->transaction->merchantAccountId;
                $Payee              = $result->transaction->orderId;
                $Cart               = $result->transaction->creditCard['customerLocation'];
                $payment_method     = $result->transaction->paymentInstrumentType;
                $payment_amount     = $result->transaction->amount;
                $country_code       = $result->transaction->currencyIsoCode;
                $Transactions       = $result->transaction->status;
                $PaymentInstruction = $result->transaction->id;
                $State              = $result->transaction->type;
                //$ExperienceProfileId=$result->transaction->createdAt->DateTime->date;
                //$create_time=$result->transaction->updatedAt->DateTime->date;
                //$update_time=$result->transaction->updatedAt->DateTimedate;
                $all_data = $result->transaction;

					//$payment_params='';
					$payment_params = array("parent_payment_id"=>$Id,"Intent"=>$Intent,"Payee"=>$Payee,"cart_id"=>$Cart,"payment_id"=>$Id,"payer_id"=>$Id,"payment_state"=>$State,"payment_amount"=>$payment_amount,'payment_method'=>$payment_method,'country_code'=>$country_code);
		           $user_id = Session::get('user_id');
                    $token = Session::get('token');
                    $language = getCurrentLang();
                    $checkout_info = json_encode($checkout_info);
                    $payment_params = json_encode($payment_params);
                     
                    $user_array = array("user_id" => $user_id,"token"=>$token,"language"=>$language,"payment_array" =>$checkout_info,"payment_params"=>$payment_params);
                   
                    $method = "POST";
                    $data = array('form_params' => $user_array);//echo "<pre>";print_r($data);exit;
                    $response = $this->api->call_api($data,'/api/online_payment',$method);
                   if($response->response->httpCode == 200)
                    {
                        Session::flash('message-success', trans('messages.Order placed successfully'));
                        return Redirect::to('/thankyou/'.encrypt($response->response->order_id))->send();
                    }
                    else
                    {
                        Session::flash('message-failure', $response->response->Message);
                        return Redirect::to('/checkout')->send();
                    }
			   
			    // After first successfull transaction, save this Braintree_cust_id in DB and use for future transactions
			}
			else
			{
			            Session::flash('message-failure', trans('messages.Something went wrong'));
                        return Redirect::to('/checkout')->send();
			}

			     echo '<pre>';print_r($result); exit;
		}
		else
		if (isset($_POST['braintree_cust_id']))
		{
			$sale = array(
			'customerId' => $braintree_cust_id,
			'amount'     => $_POST['amount'],
			'orderId'    => $_POST['invoiceid'],  // This field is get back in responce to track this transaction
			'options'    => array(
			'submitForSettlement' => true
			)
			);
		}
		else
		if (isset($_POST['action']) && $_POST['action'] == 'generateclienttoken')
		{
			//$braintree_cust_id = "31904842";
			// Generate the nonce and send it back
			try
			{
				$Braintree_ClientToken = new Braintree_ClientToken;
				$clientToken = Braintree_ClientToken::generate(array(
				// use customerId to get a previous customer from the vault
				// 'customerId' => $braintree_cust_id    // $braintree_cust_id is Fetch from DB
				));
			}
			catch(Exception $e)
			{
				// cannot get the customer from the vault!!
				$clientToken = Braintree_ClientToken::generate();
			}

			    echo $clientToken; exit;
		}
    }


    
}
